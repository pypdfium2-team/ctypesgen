R"""
Auto-generated by:
ctypesgen -i demolib.h -l demolib -L . -o pydemolib.py
"""

# -- Begin preamble --

# TODO
# - add c_ptrdiff_t only on as-needed basis
# - Avoid ctypes glob import (pollutes namespace)

import ctypes
from ctypes import *  # noqa: F401, F403

def _get_ptrdiff_t():

    int_types = (ctypes.c_int16, ctypes.c_int32)
    if hasattr(ctypes, "c_int64"):
        # Some builds of ctypes apparently do not have ctypes.c_int64
        # defined; it's a pretty good bet that these builds do not
        # have 64-bit pointers.
        int_types += (ctypes.c_int64,)

    c_ptrdiff_t = None
    for t in int_types:
        if ctypes.sizeof(t) == ctypes.sizeof(ctypes.c_size_t):
            c_ptrdiff_t = t

    return c_ptrdiff_t

c_ptrdiff_t = _get_ptrdiff_t()

# -- End preamble --


# -- Begin loader template --

import sys
import ctypes
import ctypes.util
import warnings
import pathlib

def _find_library(name, dirs, search_sys, reldir=None):
    
    if sys.platform in ("win32", "cygwin", "msys"):
        patterns = ["{}.dll", "lib{}.dll", "{}"]
    elif sys.platform == "darwin":
        patterns = ["lib{}.dylib", "{}.dylib", "lib{}.so", "{}.so", "{}"]
    else:  # assume unix pattern or plain name
        patterns = ["lib{}.so", "{}.so", "{}"]
    
    if reldir is None:
        try:
            reldir = pathlib.Path(__file__).parent
        except NameError:
            reldir = None
    
    for dir in dirs:
        dir = pathlib.Path(dir)
        if not dir.is_absolute():
            # NOTE joining an absolute path silently discardy the path before
            assert reldir != None, "cannot resolve relative paths without anchor point (__file__ not defined?)"
            dir = (reldir/dir).resolve(strict=False)
        for pat in patterns:
            libpath = dir / pat.format(name)
            if libpath.is_file():
                return str(libpath)
    
    if search_sys:
        if dirs:
            warnings.warn(f"Could not find library '{name}' in {dirs}, falling back to system")
        libpath = ctypes.util.find_library(name)
        if not libpath:
            raise ImportError(f"Could not find library '{name}' in system")
        return libpath
    else:
        raise ImportError(f"Could not find library '{name}' in {dirs} (system search disabled)")

_libs_info, _libs = {}, {}

def _register_library(name, dllclass, **kwargs):
    libpath = _find_library(name, **kwargs)
    assert libpath, "output expected from _find_library()"
    _libs_info[name] = {"name": name, "dllclass": dllclass, **kwargs, "path": libpath}
    _libs[name] = dllclass(libpath)

# -- End loader template --


# Load library 'demolib'

_register_library(
    name = 'demolib',
    dllclass = ctypes.CDLL,
    dirs = ['.'],
    search_sys = True,
)


# -- Begin header members --

# ./demolib.h: 3
if hasattr(_libs['demolib'], 'trivial_add'):
    trivial_add = _libs['demolib']['trivial_add']
    trivial_add.argtypes = [c_int, c_int]
    trivial_add.restype = c_int

# -- End header members --
